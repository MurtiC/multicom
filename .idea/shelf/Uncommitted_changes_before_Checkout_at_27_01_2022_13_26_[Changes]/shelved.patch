Index: RFID-Reader/src/com/company/Reader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.company;\r\n\r\nimport com.metratec.lib.connection.CommConnectionException;\r\nimport com.metratec.lib.rfidreader.RFIDReaderException;\r\nimport com.metratec.lib.rfidreader.uhf.PulsarMX;\r\nimport com.metratec.lib.rfidreader.uhf.UHFReader;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.time.Duration;\r\nimport java.time.LocalDateTime;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n\r\npublic class Reader extends PulsarMX {\r\n    /**\r\n     * The Character used to separate cells in CSV Files.\r\n     */\r\n    public final static String CSVSeperator = \";\";\r\n    /**\r\n     * Number of history files for every temperature Sensor.\r\n     */\r\n    public int maxHistoryFiles = 14;\r\n    /**\r\n     * Contains the last Contact of every temperature sensor.\r\n     * Key equals the TID and Value equals the date.\r\n     */\r\n    public HashMap<String, LocalDateTime> lastContact = new HashMap<String, LocalDateTime>();\r\n    private Logger logger = new Logger();\r\n\r\n    /**\r\n     * Creates a PulsarMX Object. The identifier, IP and port is set in the files/reader/opcConfig.csv file\r\n     */\r\n    public Reader() {\r\n        super(getCSVidentifier(), getCSVip(), getCSVport(), READER_MODE.ETS);\r\n    }\r\n\r\n    /**\r\n     * Updates the files/reader/readerConfig.csv file.\r\n     * Writes the Hardware-, Firmware Revision, Serialnumber and State of connection\r\n     */\r\n    public void updateConfig() {\r\n        try {\r\n            List<List<String>> csvRead = this.getCSVasArrayList(\"files/reader/readerConfig.csv\");\r\n            List<String> csvConf = csvRead.get(1);\r\n\r\n            csvConf.set(0, getCSVidentifier());\r\n            csvConf.set(1, getHardwareRevision());\r\n            csvConf.set(2, getFirmwareRevision());\r\n            csvConf.set(3, getSerialNumber());\r\n            csvConf.set(6, String.valueOf(!isConnected()));\r\n\r\n            FileWriter writer = new FileWriter(\"files/reader/readerConfig.csv\", false);\r\n\r\n            String s = \"\";\r\n            for (List<String> line : csvRead) {\r\n                s += line.stream().collect(Collectors.joining(CSVSeperator)) + \"\\n\";\r\n            }\r\n            writer.write(s);\r\n            writer.close();\r\n\r\n        } catch (RFIDReaderException e) {\r\n            logger.log(\"Reader.updateConfig(): RFIDReaderException: \" + e.toString());\r\n        } catch (CommConnectionException e) {\r\n            logger.log(\"Reader.updateConfig(): CommConnectionException: \" + e.toString());\r\n        } catch (IOException e) {\r\n            logger.log(\"Reader.updateConfig(): IOException: \" + e.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches in the given file for the cell value of the attribute in the given series. This value will be returned.\r\n     * @param filePath path to the searched file\r\n     * @param attribute ID of the value being searched for\r\n     * @param row row number in which to search\r\n     * @return\r\n     */\r\n    public static String getCSVCell(String filePath, String attribute, int row) {\r\n        ArrayList<List<String>> lines = getCSVasArrayList(filePath);\r\n        int column = -1;\r\n        boolean found = false;\r\n\r\n        if(lines.size() > 0){\r\n            for(int i = 0; i < lines.get(0).size(); i++){\r\n                if(lines.get(0).get(i).toLowerCase(Locale.ROOT).equals(attribute.toLowerCase(Locale.ROOT))){\r\n                    column = i;\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(found == false){\r\n            return \"Index out of bounds\";\r\n        }\r\n        if(column == -1){\r\n            if (row > (lines.size() - 1) || column > (lines.get(row).size() - 1)) {\r\n                return \"Index out of bounds\";\r\n            }\r\n\r\n        }\r\n\r\n        return lines.get(row).get(column);\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the selected csv File as a ArrayList<List<String>>.\r\n     * Each line of the csv File is saved in a List<String>.\r\n     *\r\n     * @param filePath path to the selected csv-file\r\n     * @return the data of the selected csv-file\r\n     */\r\n    public static ArrayList<List<String>> getCSVasArrayList(String filePath) {\r\n        try {\r\n            Scanner scanner = new Scanner(new File(filePath));\r\n            ArrayList<List<String>> lines = new ArrayList<>();\r\n\r\n            while (scanner.hasNext()) {\r\n                String line = scanner.nextLine();\r\n                String[] values = line.split(CSVSeperator);\r\n                lines.add(Arrays.asList(values));\r\n            }\r\n            scanner.close();\r\n\r\n            return lines;\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will only be used for the super-constructor.\r\n     * It only returns the value of the \"ip-address cell\" in the config/pulsarMX.csv-file.\r\n     * This should, but don't have to be, the current ip-address of the RFID-Reader.\r\n     * If the value of the cell has been changed after the Reader has been started, but the Reader has not been\r\n     * restarted yet, the function will NOT return the current IP-address of the reader.\r\n     *\r\n     * @return the value of the \"ip-address cell\" in the config/pulsarMX.csv-file\r\n     */\r\n    private static String getCSVip() {\r\n        String pathToOpcConfig = \"files/reader/opcConfig.csv\";\r\n        String ipAdress = getCSVCell(pathToOpcConfig, \"IPAdress\", 1);\r\n        if (ipAdress.equals(\"Index out of bounds\")) ipAdress = \"192.168.2.239\";\r\n        return ipAdress;\r\n    }\r\n\r\n    /**\r\n     * This function will only be used for the super-constructor.\r\n     * It only returns the value of the \"port cell\" in the config/pulsarMX.csv-file.\r\n     * This should, but don't have to be, the current port of the RFID-Reader.\r\n     * If the value of the cell has been changed after the Reader has been started, but the Reader has not been\r\n     * restarted yet, the function will NOT return the current port of the reader.\r\n     *\r\n     * @return the value of the \"port cell\" in the config/pulsarMX.csv-file\r\n     */\r\n    private static int getCSVport() {\r\n        String pathToOpcConfig = \"files/reader/opcConfig.csv\";\r\n        String port = getCSVCell(pathToOpcConfig, \"Port\", 1);\r\n        if (port.equals(\"Index out of bounds\")) port = \"10001\";\r\n        return Integer.parseInt(port);\r\n    }\r\n\r\n    /**\r\n     * This function will only be used for the super-constructor.\r\n     * It only returns the value of the \"identifier cell\" in the config/pulsarMX.csv-file.\r\n     * This should, but don't have to be, the current identifier of the RFID-Reader.\r\n     * If the value of the cell has been changed after the Reader has been started, but the Reader has not been\r\n     * restarted yet, the function will NOT return the current identifier of the reader.\r\n     *\r\n     * @return the value of the \"identifier cell\" in the config/pulsarMX.csv-file\r\n     */\r\n    private static String getCSVidentifier() {\r\n        String pathToOpcConfig = \"files/reader/opcConfig.csv\";\r\n        String identifier = getCSVCell(pathToOpcConfig, \"Id\", 1);\r\n        if (identifier.equals(\"Index out of bounds\")) identifier = \"reader1\";\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * This Function creates the opcConfig file with standard values.\r\n     * The standard values are:\r\n     * IP-Address:  192.168.2.239\r\n     * Port:        10001\r\n     * Identifier:  reader1\r\n     */\r\n    public static void createOpcConfig() {\r\n        File opcConfigFile = new File(\"files/reader/opcConfig.csv\");\r\n\r\n        String title = \"Id\" + CSVSeperator + \"Name\" + CSVSeperator + \"Description\" + CSVSeperator + \"Location\" + CSVSeperator + \"IPAdress\" + CSVSeperator + \"Port\" + CSVSeperator + \"Pin\" + CSVSeperator + \"Mode\" + CSVSeperator + \"State\" + CSVSeperator + \"\\n\";\r\n        String standard = \"reader1\" + CSVSeperator + \"pulsarMX\" + CSVSeperator + \"Lesegeraet\" + CSVSeperator + \"\" + CSVSeperator + \"192.168.2.239\" + CSVSeperator + \"10001\" + CSVSeperator + CSVSeperator + CSVSeperator + CSVSeperator + \"\\n\";\r\n\r\n        try {\r\n            FileWriter writer = new FileWriter(opcConfigFile.getPath(), false);\r\n            writer.write(title + standard);\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Writes the measured temperature of the TID into the \"files/sensoren/'tid'/'date'.csv file.\r\n     * If the TID was not added yet, the function will NOT create a new directory. It only writes into directories that already exist.\r\n     * There is 1 file for every TID and every Day. The temperature will just be written, if the new Temperature is not equal to the latest temperature.\r\n     *\r\n     * @param tid         TID of the TempTag\r\n     * @param temperature measured Temperature\r\n     * @param dateTime    date and time of measured Temperature\r\n     */\r\n    public void writeTemperature(String tid, double temperature, LocalDateTime dateTime) {\r\n        String s = temperature + CSVSeperator + dateTime.toLocalDate() + \" \" + dateTime.toLocalTime() + \"\\n\";\r\n        String pathToDir = \"files/sensoren/\" + tid;\r\n        String pathToFile = pathToDir + \"/\" + dateTime.toLocalDate() + \".csv\";\r\n        File dir = new File(pathToDir);\r\n        File history = new File(pathToFile);\r\n\r\n        if (!dir.exists()) {\r\n            System.out.println(\"Der Sensor \" + tid + \" wurde noch nicht hinzugefügt\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            FileWriter writer = new FileWriter(history, true);\r\n            Scanner scanner = new Scanner(history);\r\n\r\n            if (!scanner.hasNext()) {\r\n                writer.append(\"Temperature\" + CSVSeperator + \"Date Time\\n\");\r\n                writer.append(s);\r\n                writer.close();\r\n                scanner.close();\r\n                System.out.println(pathToFile + \" wurde erstellt\");\r\n            } else {\r\n                String r = \"\";\r\n                while (scanner.hasNextLine()) {\r\n                    r = scanner.nextLine();\r\n                }\r\n\r\n                String[] value = r.split(CSVSeperator);\r\n                if (!value[0].equals(String.valueOf(temperature))) {\r\n                    writer.append(s);\r\n                }\r\n                writer.close();\r\n                scanner.close();\r\n            }\r\n            this.deleteOldestFile(pathToDir, dateTime);\r\n        } catch (FileNotFoundException e) {\r\n            logger.log(\"Reader.writeTemperature(): FileNotFoundException: \" + e.toString());\r\n        } catch (IOException e) {\r\n            logger.log(\"Reader.writeTemperature(): IOException: \" + e.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes the current temperature of the TID sensor into the /current.csv file.\r\n     * If the temperature is -300 (error) and the sensor was not accessible in the specified time (timeout), the sensor will be marked as notConnected;\r\n     *\r\n     * @param tid         tid of the temperature sensor\r\n     * @param temperature measured temperature\r\n     */\r\n    public void writeCurrentTemperature(String tid, double temperature, LocalDateTime dateTime) {\r\n        try {\r\n            String s;\r\n            if (temperature == -300) {\r\n                LocalDateTime lastContactTid = lastContact.get(tid);\r\n                Duration diffBetweenContacts = Duration.between(lastContactTid, dateTime);\r\n\r\n                double timeout = Double.valueOf(getCSVCell(\"files/sensoren/\" + tid + \"/config.csv\", \"timeout\", 1)); //antenne soll noch raus dann 6\r\n                if (diffBetweenContacts.toMinutes() > timeout) {\r\n                    if(getCSVCell(\"files/sensoren/\" +tid+\"/current.csv\", \"NotConnected\", 1).toLowerCase(Locale.ROOT).equals(\"false\")){\r\n                        logger.log(tid+\" Timeout reached!\");\r\n                    }\r\n                    s = tid + CSVSeperator + \"\" + CSVSeperator + \"true\\n\";\r\n                } else {\r\n                    s = tid + CSVSeperator + \"\" + CSVSeperator + \"false\\n\";\r\n                }\r\n            } else {\r\n                s = tid + CSVSeperator + temperature + CSVSeperator + \"false\\n\";\r\n            }\r\n\r\n            String pathToDir = \"files/sensoren/\" + tid;\r\n            String pathToFile = pathToDir + \"/current.csv\";\r\n            File file = new File(pathToFile);\r\n            File dir = new File(pathToDir);\r\n\r\n            if (!dir.exists()) {\r\n                System.out.println(\"TagId \" + tid + \" wurde noch nicht hinzugefügt\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                FileWriter writer = new FileWriter(file, false);\r\n                writer.write(\"TagId;Temperature;NotConnected\\n\" + s);\r\n                writer.close();\r\n            } catch (IOException e) {\r\n                logger.log(\"Reader.writeCurrentTemperature(): IOException: \" + e.toString());\r\n            }\r\n\r\n        } catch (NumberFormatException e) {\r\n            logger.log(\"Reader.writeCurrentTemperature(): NumberFormatException: \" + e.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads the temperature of the sensor with the matching TID.\r\n     * If the reader can not access the sensor, the function will return -300 (not reachable).\r\n     *\r\n     * @param tid TID of the wanted sensor\r\n     * @return the measured temperature or -300 (error)\r\n     */\r\n    public double readTemperature(String tid) {\r\n\r\n        try {\r\n            this.setMask(UHFReader.MEMBANK.TID, tid);\r\n            this.setTagData(UHFReader.MEMBANK.USR, \"0000\", 256);\r\n            //Thread.sleep(100);\r\n            List<String> data = this.getTagData(UHFReader.MEMBANK.USR, 256, 1);\r\n            if (data.size() > 0) { // == 0 wenn tid nicht in reichweite\r\n                int rawdata = Integer.parseInt(data.get(0), 16);\r\n                double temperature = ((double) rawdata) / 255 * 63.75;\r\n                if (rawdata >= 255 || rawdata == 0) {\r\n                    temperature = -300;\r\n                } else {\r\n                    lastContact.put(tid, LocalDateTime.now());\r\n                }\r\n                return temperature;\r\n            }\r\n        } catch (CommConnectionException e) {\r\n            logger.log(\"Reader.readTemperature(): CommConnectionException: \" + e.toString());\r\n        } catch (RFIDReaderException e) {\r\n            logger.log(\"Reader.readTemperature(): RFIDReaderException: \" + e.toString());\r\n        }\r\n        return -300;\r\n    }\r\n\r\n    /**\r\n     * If there are more than 'maxHistoryFiles' files for 1 TID, the oldest file will be deleted.\r\n     * The history will only be saved for 'maxHistoryFiles' days.\r\n     *\r\n     * @param pathToDir path to directory\r\n     * @param dateTime  dateTime of the measured value\r\n     */\r\n    public void deleteOldestFile(String pathToDir, LocalDateTime dateTime) {\r\n        File f1 = new File(pathToDir + \"/\" + dateTime.toLocalDate().minusDays(maxHistoryFiles) + \".csv\");\r\n        if (f1.exists()) {\r\n            f1.delete();\r\n            System.out.println(f1.getName() + \" gelöscht\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function is used to get every added TID from the files Directory.\r\n     *\r\n     * @return TIDs of the added Temperature Sensors\r\n     */\r\n    public List<String> getTIDs() {\r\n        List<String> tids = new ArrayList<>();\r\n        String path = \"files/sensoren\";\r\n        File[] dir = new File(path).listFiles();\r\n        for (int i = 0; i < dir.length; i++) {\r\n            tids.add(dir[i].getName());\r\n        }\r\n        return tids;\r\n    }\r\n\r\n    /**\r\n     * Writes the state of the reader into the readerCurrent.csv file.\r\n     * If the reader is connected, it will write: notConnected; false\r\n     * If the reader is not connected, it will write: notConnected; true\r\n     *\r\n     * @param state state of connection of the reader\r\n     */\r\n    public void setReaderConnectionState(boolean state) {\r\n        String pathToFile = \"files/reader/ \";\r\n        File file = new File(pathToFile);\r\n\r\n        ArrayList<List<String>> readerCurrentCSV = getCSVasArrayList(pathToFile);\r\n        readerCurrentCSV.get(1).set(2, String.valueOf(!state));\r\n\r\n        String s = \"\";\r\n        for (List l : readerCurrentCSV) {\r\n            s += l.stream().collect(Collectors.joining(CSVSeperator)) + \";\\n\";\r\n        }\r\n        try {\r\n            FileWriter writer = new FileWriter(file, false);\r\n            writer.write(s);\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            logger.log(\"Reader.setState(): IOException: \" + e.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes the state of the input Pin into the readerCurrent.csv file.\r\n     *\r\n     * @param pin   selected pin\r\n     * @param state state of selected pin\r\n     */\r\n    public void setInputPinState(int pin, boolean state) {\r\n        String pathToFile = \"files/reader/readerCurrent.csv\";\r\n        File file = new File(pathToFile);\r\n\r\n        ArrayList<List<String>> readerCurrentCSV = getCSVasArrayList(pathToFile);\r\n        readerCurrentCSV.get(pin + 1).set(1, String.valueOf(state));\r\n\r\n        String s = \"\";\r\n        for (List l : readerCurrentCSV) {\r\n            s += l.stream().collect(Collectors.joining(CSVSeperator)) + \";\\n\";\r\n        }\r\n        try {\r\n            FileWriter writer = new FileWriter(file, false);\r\n            writer.write(s);\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            logger.log(\"Reader.setInputState(): IOException: \" + e.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compares the added Temperature Sensors with the accessible Sensors and writes the TIDs of the missing Sensor to the readerCurrent.csv file.\r\n     *\r\n     * @param tids List of added Temperature Sensors\r\n     */\r\n    public void addMissingTIDs(List<String> tids) {\r\n        String s = \"\";\r\n        try {\r\n            List<String> allTIDs = this.getTagTIDs();\r\n            for (int i = 0; i < allTIDs.size(); i++) {\r\n                if (!tids.contains(allTIDs.get(i).substring(0, 24))) {\r\n                    s += allTIDs.get(i) + \",\";\r\n                }\r\n            }\r\n            s = s.substring(0, s.length() - 1); //letztes Komma weg\r\n            ArrayList<List<String>> readerCurrentCSV = this.getCSVasArrayList(\"files/reader/readerCurrent.csv\");\r\n\r\n            if (readerCurrentCSV.get(1).size() < 4) {\r\n                List<String> temp = new ArrayList<>();\r\n\r\n                for (int i = 0; i < readerCurrentCSV.get(1).size(); i++) {\r\n                    temp.add(readerCurrentCSV.get(1).get(i));\r\n                }\r\n                temp.add(s);\r\n                readerCurrentCSV.set(1, temp);\r\n\r\n            } else {\r\n                readerCurrentCSV.get(1).set(3, s);\r\n            }\r\n\r\n            String allLines = \"\";\r\n            for (List l : readerCurrentCSV) {\r\n                allLines += l.stream().collect(Collectors.joining(CSVSeperator)) + \";\\n\";\r\n            }\r\n\r\n            FileWriter writer = new FileWriter(\"files/reader/readerCurrent.csv\", false);\r\n            writer.write(allLines);\r\n            writer.close();\r\n\r\n        } catch (CommConnectionException e) {\r\n            logger.log(\"Reader.addMissingTIDs(): CommConnectionException: \" + e.toString());\r\n        } catch (RFIDReaderException e) {\r\n            logger.log(\"Reader.addMissingTIDs(): RFIDReaderException: \" + e.toString());\r\n        } catch (IOException e) {\r\n            logger.log(\"Reader.addMissingTIDs(): IOException: \" + e.toString());\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RFID-Reader/src/com/company/Reader.java b/RFID-Reader/src/com/company/Reader.java
--- a/RFID-Reader/src/com/company/Reader.java	
+++ b/RFID-Reader/src/com/company/Reader.java	
@@ -25,8 +25,8 @@
      */
     public int maxHistoryFiles = 14;
     /**
-     * Contains the last Contact of every temperature sensor.
-     * Key equals the TID and Value equals the date.
+     * Contains the last contact of every temperature sensor.
+     * Key equals the TID and value equals the date.
      */
     public HashMap<String, LocalDateTime> lastContact = new HashMap<String, LocalDateTime>();
     private Logger logger = new Logger();
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AnalysisUIOptions\">\r\n    <option name=\"SCOPE_TYPE\" value=\"8\" />\r\n    <option name=\"CUSTOM_SCOPE_NAME\" value=\"Doc\" />\r\n  </component>\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"GitHub:jar\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e1b1cbe4-f994-46ca-98ef-709098024664\" name=\"Changes\" comment=\"Kommentare hinzugefügt\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/RFID-Reader/src/com/company/Reader.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/RFID-Reader/src/com/company/Reader.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/RFID-Reader/src/com/company/testClass.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/RFID-Reader/src/com/company/testClass.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"RFID-Reader\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"NamedScopeManager\">\r\n    <scope name=\"Doc\" pattern=\"src:com.company.Logger||src:com.company.Main||src:com.company.Reader\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"20x6wGgLdEkX17C2ZtzCsP7pk5i\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Workspace\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Artifacts\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"S:\\OneDrive\\Uni\\Semester 5\\GitHub\\Workspace\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"S:\\OneDrive\\Uni\\Semester 5\\GitHub\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"17\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.company.Main\" />\r\n      <module name=\"GitHub\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Tet\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.company.testClass\" />\r\n      <module name=\"GitHub\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Main\" />\r\n      <item itemvalue=\"Application.Tet\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e1b1cbe4-f994-46ca-98ef-709098024664\" name=\"Changes\" comment=\"\" />\r\n      <created>1636974127658</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1636974127658</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Testversion\">\r\n      <created>1637167634567</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637167634567</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\".jar erstellt\">\r\n      <created>1637233953645</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637233953645</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Methode addMissingTIDS(List&lt;String&gt;) hinzugefügt\">\r\n      <created>1637242902774</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637242902774</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"TID zu TagId umbenannt\">\r\n      <created>1637250231049</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637250231049</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\".jar build\">\r\n      <created>1637250426492</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637250426492</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\".jar build\">\r\n      <created>1637251296289</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637251296289</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\".jar build v3\">\r\n      <created>1637252260149</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637252260149</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\".jar build v4\">\r\n      <created>1637252554081</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637252554081</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\".jar build v5\">\r\n      <created>1637253069848</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637253069848</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\".jar build v5\">\r\n      <created>1637253089314</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637253089314</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Funktion addMissingTIDs() hinzugefügt; GitHub.jar updated\">\r\n      <created>1637569083740</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637569083741</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Logger hinzugefügt, createOpcConfig() überarbeitet,\">\r\n      <created>1638351709014</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638351709014</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"GitHub.jar update\">\r\n      <created>1638351765473</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638351765473</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"GitHub.jar update\">\r\n      <created>1638351788808</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638351788808</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"überflüssige Funtkionen entfernt, Suchen nach Parametern in CSV; GitHub.jar update\">\r\n      <created>1638435847429</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638435847429</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Kommentare hinzugefügt\">\r\n      <created>1642668444815</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1642668444815</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"17\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"RFID-Reader\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Testversion\" />\r\n    <MESSAGE value=\".jar erstellt\" />\r\n    <MESSAGE value=\"Methode addMissingTIDS(List&lt;String&gt;) hinzugefügt\" />\r\n    <MESSAGE value=\"TID zu TagId umbenannt\" />\r\n    <MESSAGE value=\".jar build\" />\r\n    <MESSAGE value=\".jar build v3\" />\r\n    <MESSAGE value=\".jar build v4\" />\r\n    <MESSAGE value=\".jar build v5\" />\r\n    <MESSAGE value=\"Funktion addMissingTIDs() hinzugefügt; GitHub.jar updated\" />\r\n    <MESSAGE value=\"Logger hinzugefügt, createOpcConfig() überarbeitet,\" />\r\n    <MESSAGE value=\"GitHub.jar update\" />\r\n    <MESSAGE value=\"überflüssige Funtkionen entfernt, Suchen nach Parametern in CSV; GitHub.jar update\" />\r\n    <MESSAGE value=\"Kommentare hinzugefügt\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Kommentare hinzugefügt\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -11,9 +11,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e1b1cbe4-f994-46ca-98ef-709098024664" name="Changes" comment="Kommentare hinzugefügt">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/RFID-Reader/src/com/company/Reader.java" beforeDir="false" afterPath="$PROJECT_DIR$/RFID-Reader/src/com/company/Reader.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/RFID-Reader/src/com/company/testClass.java" beforeDir="false" afterPath="$PROJECT_DIR$/RFID-Reader/src/com/company/testClass.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -215,7 +214,14 @@
       <option name="project" value="LOCAL" />
       <updated>1642668444815</updated>
     </task>
-    <option name="localTasksCounter" value="17" />
+    <task id="LOCAL-00017" summary="Kommentare hinzugefügt">
+      <created>1642668894289</created>
+      <option name="number" value="00017" />
+      <option name="presentableId" value="LOCAL-00017" />
+      <option name="project" value="LOCAL" />
+      <updated>1642668894289</updated>
+    </task>
+    <option name="localTasksCounter" value="18" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
